# File: codedeploy.yaml 
# This module creates codedeploy project and roles 
#
# Before executing this, make sure "init.sh" is called which would create all "Parameter Store" 
# and "Secrets manager" values 
#
# Resource that would be created
# 1) CodeDeploy project  
# 2) CodeDeploy Deployment group 
# 
# Reference: https://tech.metalab.com/ecs-blue-green-deployment-pipelines-with-codepipeline-codedeploy-9b7039084d57


Description: "Create CodeDeploy project and deployment group"

Parameters: 
  networkStackName:
    Description: Name of the base stack with all network resources
    Type: String
    Default: nw

  permStackName:
    Description: Name of the base stack with all network resources
    Type: String
    Default: perm

  perm2StackName:
    Description: Name of the base stack with all network resources
    Type: String
    Default: perm2
  
  ec2StackName:
    Description: Name of the base stack with all network resources
    Type: String
    Default: ec2
          
  albStackName:
    Description: Name of the base stack with all network resources
    Type: String
    Default: alb

  autoscaleStackName:
    Description: Name of the base stack with all network resources
    Type: String
    Default: autoscale

  environment: 
    Type: String 
    Default: dev 
    AllowedValues: 
      - dev
      - prod 

Resources:
  # Create CodeDeploy Application    
  # Inputs: 
  #  From Parameter store
  #  1) codedeploy application name  
  # 
  codeDeployECSProject: 
    Type: AWS::CodeDeploy::Application
    Properties: 
      ApplicationName: !Sub '{{resolve:ssm:/${environment}/codebuild/project_name}}'
      ComputePlatform: ECS
      Tags:
       - Key: Name
         Value: !Join [" - ", [Fn::Sub: "${AWS::StackName}", "app "] ]
       - Key: Environment
         Value: !Sub ${environment}

  # Create CodeDeploy Deployment group ]    
  # Inputs: 
  # 1) codedeploy application reference
  # 2) codedeploy service role reference (from Permissions Stack)
  # 3) EC2 tag name 
  # 
  codeDeployECSDeploymentGroup: 
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties: 
      DeploymentGroupName: ECSCodeDeploymentGroup 
      ApplicationName: !Ref codeDeployECSProject
      ServiceRoleArn: 
        Fn::ImportValue: 
           Fn::Sub: "${perm2StackName}-CODEDEPLOY-SERVICE-ROLE-ARN"
      DeploymentConfigName: CodeDeployDefault.ECSAllAtOnce
      
      ECSServices:   
        - ClusterName: !Sub '{{resolve:ssm:/${environment}/ecs/cluster_name}}'
          ServiceName: !Sub '{{resolve:ssm:/${environment}/ecs/service_name}}'
          
      DeploymentStyle:  
         DeploymentOption: WITH_TRAFFIC_CONTROL
         DeploymentType: BLUE_GREEN
         
      BlueGreenDeploymentConfiguration: 
        DeploymentReadyOption: 
            ActionOnTimeout: CONTINUE_DEPLOYMENT
            WaitTimeInMinutes: 0
        TerminateBlueInstancesOnDeploymentSuccess: 
            Action: TERMINATE
            TerminationWaitTimeInMinutes: 1
      # 
      AutoRollbackConfiguration:
         Enabled: true
         Events:
         - DEPLOYMENT_FAILURE
         - DEPLOYMENT_STOP_ON_REQUEST
               
      LoadBalancerInfo: 
#        ElbInfoList: 
#            - Name: 
#                Fn::ImportValue: 
#                  Fn::Sub: "${albStackName}-ALB" 
#        TargetGroupInfoList:
#            - Name: 
#                Fn::ImportValue: 
#                  Fn::Sub: "${albStackName}-TARGET-GROUP-BLUE" 
        TargetGroupPairInfoList: 
          - ProdTrafficRoute: 
              ListenerArns:
                - Fn::ImportValue: 
                    Fn::Sub: "${albStackName}-LISTENER-BLUE-TRAFFIC" 
            TestTrafficRoute:
              ListenerArns:
                - Fn::ImportValue: 
                    Fn::Sub: "${albStackName}-LISTENER-GREEN-TRAFFIC"  
            TargetGroups:
                - Name: !Sub '{{resolve:ssm:/${environment}/alb/target_group_1}}'
                - Name: !Sub '{{resolve:ssm:/${environment}/alb/target_group_2}}'
      Tags:
       - Key: Name
         Value: !Join [" - ", [Fn::Sub: "${AWS::StackName}", "app "] ]
       - Key: Environment
         Value: !Sub ${environment}
         
Outputs:
  CodeDeployGroupECSGroup:
    Value: !Ref codeDeployECSDeploymentGroup
    Export:
      "Name" :
        Fn::Sub: "${AWS::StackName}-CODEDEPLOY-ECS-GROUP"
        
  CodeDeployECSProject:
    Value: !Ref codeDeployECSProject
    Export:
      "Name" :
        Fn::Sub: "${AWS::StackName}-CODEDEPLOY-ECS-PROJECT"
        