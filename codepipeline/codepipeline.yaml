Description: "Create codepipeline project"

Parameters: 
  networkStackName:
    Description: Name of the base stack with all network resources
    Type: String
    Default: nw

  permStackName:
    Description: Name of the base stack with all network resources
    Type: String
    Default: perm

  albStackName:
    Description: Name of the base stack with all network resources
    Type: String
    Default: alb

  autoscaleStackName:
    Description: Name of the base stack with all network resources
    Type: String
    Default: autoscale

  codebuildStackName:
    Description: Name of the base stack with all network resources
    Type: String
    Default: codebuild

  codedeployStackName:
    Description: Name of the base stack with all network resources
    Type: String
    Default: codedeploy

  environment: 
    Type: String 
    Default: dev 
    AllowedValues: 
      - dev
      - prod 

  projectName: 
    Type: String 
    Default: mycodepipeline

Resources:
  codepipelineBucket:
    Description: "Create S3 bucket for storing codepipeline artifacts"
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ["-", [!Sub '{{resolve:ssm:/${environment}/codepipeline/bucket_prefix}}', !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]] ]]
      
      Tags:
       - Key: Name
         Value: !Join [" - ", [Fn::Sub: "${AWS::StackName}", "bucket"] ]
       - Key: Environment
         Value: !Sub ${environment}	

  pipelineProject:
    Type: AWS::CodePipeline::Pipeline
    DependsOn: codepipelineBucket
    Properties:
      Name: SpringDemoCodePipeline
      RoleArn: 
        Fn::ImportValue: 
            Fn::Sub: "${codedeployStackName}-PIPELINE-SERVICE-ROLE-ARN"
      Stages:
        - Name: SourceStage
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: "1"
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                Owner: '{{resolve:secretsmanager:git_creds:SecretString:username}}'
                
                # Make sure just to specify only the reponame, not the fullpath 
                Repo: !Sub '{{resolve:ssm:/${environment}/codebuild/git_repo_short_name}}'
                
                Branch: main
                OAuthToken: '{{resolve:secretsmanager:git_creds:SecretString:token}}'
              RunOrder: 1
        - Name: BackendStagingBuildStage
          Actions:
            - Name: BackendStagingBuildAction
              InputArtifacts:
                - Name: SourceOutput
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              OutputArtifacts:
                - Name: BuildBackendStagingArtifact
              Configuration:
                ProjectName: !Sub '{{resolve:ssm:/${environment}/codebuild/project_name}}'
        - Name: Deploy
          Actions:
            - Name: Deploy
              RunOrder: 1
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeploy
                Version: '1'
              Configuration:
                ApplicationName: !Sub '{{resolve:ssm:/${environment}/codebuild/project_name}}'
                DeploymentGroupName: 
                  Fn::ImportValue: 
                     Fn::Sub: "${codedeployStackName}-DEPLOY-GROUP"
              InputArtifacts:
                - Name: BuildBackendStagingArtifact
      ArtifactStore:
        Location: !Ref codepipelineBucket
        Type: S3

Outputs:
  CodePipelineBucket:
    Value: !Ref codepipelineBucket
    Export:
      "Name" :
        Fn::Sub: "${AWS::StackName}-CODEPIPELINE-BUCKET"
