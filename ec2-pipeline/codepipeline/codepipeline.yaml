# File: codepipeline.yaml 
# This module creates codepipeline project and roles 
#
# Before executing this, make sure "init.sh" is called which would create all "Parameter Store" 
# and "Secrets manager" values 
#
# Resource that would be created
# 1) CodePipeline S3 bucket for storing artifacts   
# 2) CodePipeline project 
# 3) CodePipeline Service Role 
# 
#  In order to take care of deleting and emptying the S3 bucket:
# 4) Lambda Role for deleting S3 bucket 
# 5) Lambda function to empty bucket, which runs only during "delete" stack operation 
# 6) Custom resource to empty bucket  

Description: "Create codepipeline project"

Parameters: 
  networkStackName:
    Description: Name of the base stack with all network resources
    Type: String
    Default: nw

  permStackName:
    Description: Stack with basis permissions 
    Type: String
    Default: perm

  #
  perm2StackName:
    Description: Stack with extended permissions
    Type: String
    Default: perm2
    
  albStackName:
    Description: ALB stack resources 
    Type: String
    Default: alb

  codebuildStackName:
    Description: CodeBuild resources 
    Type: String
    Default: codebuild

  # 
  ecsStackName:
    Description: ECS resources 
    Type: String
    Default: ecs
    
  codedeployStackName:
    Description: CodeDeploy resources 
    Type: String
    Default: codedeploy

  environment: 
    Type: String 
    Default: dev 
    AllowedValues: 
      - dev
      - prod 

  projectName: 
    Type: String 
    Default: mycodepipeline

Resources:
  # 
  # Create CodePipeline bucket for storing artifacts     
  # Inputs: 
  #  1) Bucket prefix (from Parameter store)  
  #  2) StackID (get only the last part of the stack id, after splitting by "-" and "/")
  #
  codePipelineBucket:
    Description: "Create S3 bucket for storing codepipeline artifacts"
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ["-", [!Sub '{{resolve:ssm:/${environment}/codepipeline/bucket_prefix}}', !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]] ]]
      
      Tags:
       - Key: Name
         Value: !Join [" - ", [Fn::Sub: "${AWS::StackName}", "bucket"] ]
       - Key: Environment
         Value: !Sub ${environment}	
  # 
  # Create CodePipeline Project with 3 stages - source, build and deploy      
  # Inputs: 
  #  1) Code Pipeline Role arn  
  #  2) GitHub specific 
  #  2.a) GitHub repo name (last part only, from parameter store)
  #  2.b) GitHub user name (from Secrets manager)
  #  2.c) GitHub OAuth token (from Secrets manager)
  #  2.d) Artifact Storage location (need this info in CodeDeploy)
  # 
  #  3) CodeBuild specific 
  #  3.a) Application name (from parameter store)
  # 
  #  4) CodeDeploy specific 
  #  3.a) Application name (from parameter store)
  #  3.b) DeploymentGroup name 
  #  3.c) Artifact Storage location (from CodeBuild)
  # 
  #  5) CodePipeline bucket reference 
  #  6) storage as S3 
  #
#  pipelineProjectUsingCodeDeploy:
#    Type: AWS::CodePipeline::Pipeline
#    DependsOn: codepipelineBucket
#    Properties:
#      Name: ec2PipelineUsingCodeDeploy
#      RoleArn:
#        Fn::ImportValue: 
#            Fn::Sub: "${permStackName}-PIPELINE-SERVICE-ROLE-ARN"
#      Stages:
#        - Name: SourceStage
#          Actions:
#            - Name: GetSource
#              ActionTypeId:
#                Category: Source
#                Owner: ThirdParty
#                Provider: GitHub
#                Version: "1"
#              OutputArtifacts:
#                - Name: sourceoutput
#              Configuration:
#                Owner: '{{resolve:secretsmanager:git_creds:SecretString:username}}'
#                
#                # Make sure just to specify only the reponame, not the fullpath 
#                Repo: !Sub '{{resolve:ssm:/${environment}/codebuild/git_repo_short_name}}'
#                
#                Branch: main
#                OAuthToken: '{{resolve:secretsmanager:git_creds:SecretString:token}}'
#              RunOrder: 1
#        - Name: BuildStage
#          Actions:
#            - Name: Build
#              InputArtifacts:
#                - Name: sourceoutput
#              ActionTypeId:
#                Category: Build
#                Owner: AWS
#                Provider: CodeBuild
#                Version: "1"
#              OutputArtifacts:
#                - Name: buildartifacts
#              Configuration:
#                ProjectName: !Sub '{{resolve:ssm:/${environment}/codebuild/project_name}}'
#        - Name: DeployStage
#          Actions:
#            - Name: Deploy
#              RunOrder: 1
#              ActionTypeId:
#                Category: Deploy
#                Owner: AWS
#                Provider: CodeDeploy
#                Version: '1'
#              Configuration:
#                ApplicationName: !Sub '{{resolve:ssm:/${environment}/codebuild/project_name}}'
#                DeploymentGroupName: 
#                  Fn::ImportValue: 
#                     Fn::Sub: "${codedeployStackName}-DEPLOY-GROUP"
#              InputArtifacts:
#                - Name: buildartifacts
#      ArtifactStore:
#        Location: !Ref codepipelineBucket
#        Type: S3

  #
  # 
  # Create CodePipeline Project with 3 stages - source, build and deploy      
  # Inputs: 
  #  1) Code Pipeline Role arn  
  #  2) GitHub specific 
  #  2.a) GitHub repo name (last part only, from parameter store)
  #  2.b) GitHub user name (from Secrets manager)
  #  2.c) GitHub OAuth token (from Secrets manager)
  #  2.d) Artifact Storage location (need this info in CodeDeploy)
  # 
  #  3) CodeBuild specific 
  #  3.a) Application name (from parameter store)
  # 
  #  4) CodeDeploy specific 
  #  3.a) Application name (from parameter store)
  #  3.b) DeploymentGroup name 
  #  3.c) Artifact Storage location (from CodeBuild)
  # 
  #  5) CodePipeline bucket reference 
  #  6) storage as S3 
  #
  pipelineProjectUsingECS:
    Type: AWS::CodePipeline::Pipeline
    DependsOn: codepipelineBucket
    Properties:
      Name: ecsPipeline
      RoleArn:
        Fn::ImportValue: 
            Fn::Sub: "${permStackName}-PIPELINE-SERVICE-ROLE-ARN"
      Stages:
        - Name: SourceStage
          Actions:
            - Name: GetSource
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: "1"
              OutputArtifacts:
                - Name: sourceoutput
              Configuration:
                Owner: '{{resolve:secretsmanager:git_creds:SecretString:username}}'
                
                # Make sure just to specify only the reponame, not the fullpath 
                Repo: !Sub '{{resolve:ssm:/${environment}/codebuild/git_repo_short_name}}'
                
                Branch: main
                OAuthToken: '{{resolve:secretsmanager:git_creds:SecretString:token}}'
              RunOrder: 1
        - Name: BuildStage
          Actions:
            - Name: Build
              InputArtifacts:
                - Name: sourceoutput
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              OutputArtifacts:
                - Name: buildartifacts
              Configuration:
                ProjectName: !Sub '{{resolve:ssm:/${environment}/codebuild/project_name}}'
        - Name: DeployStage
          Actions:
            - Name: Deploy
              RunOrder: 1
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeployToECS
                Version: '1'
              Configuration:
                ApplicationName: !Sub '{{resolve:ssm:/${environment}/codebuild/project_name}}'
                DeploymentGroupName: 
                Image1ArtifactName: 
                Image1ContainerName:
                TaskDefinitionTemplatePath: 
                AppSpecTemplatePath: 
                TaskDefinitionTemplateArtifact:
              InputArtifacts:
                - Name: buildartifacts
      ArtifactStore:
        Location: !Ref codepipelineBucket
        Type: S3
        
  # Custome resource which joins the Bucket and Role for emptying the bucket while deletion  
  CustomBucketResource:
    Type: 'AWS::CloudFormation::CustomResource'
    Properties:
      ServiceToken:  
          Fn::ImportValue: 
            Fn::Sub: "${permStackName}-S3-LAMBDA-FUNCTION-ARN"
      BucketName: !Ref codepipelineBucket 
    
Outputs:
  CodePipelineBucket:
    Value: !Ref codepipelineBucket
    Export:
      "Name" :
        Fn::Sub: "${AWS::StackName}-CODEPIPELINE-BUCKET"

  #
  CodePipelineProject:
    Value: !Ref codepipelineProject
    Export:
      "Name" :
        Fn::Sub: "${AWS::StackName}-CODEPIPELINE-PROJECT"