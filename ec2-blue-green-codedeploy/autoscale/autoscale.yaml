# File: autoscale.yaml 
# This module create 2 EC2 instances  
#
# Before executing this, make sure "init.sh" is called which would create all "Parameter Store" values 
#
# Resource that would be created
# 1) EC2 Image template  
# 2) Autoscaling group   
Description: "Create EC2 template and Autoscaling group"

Parameters: 
  networkStackName:
    Description: Name of the base stack with all network resources
    Type: String
    Default: nw

  permStackName:
    Description: Name of the base stack with all network resources
    Type: String
    Default: perm

  albStackName:
    Description: Name of the base stack with all network resources
    Type: String
    Default: alb

  environment: 
    Type: String 
    Default: dev 
    AllowedValues: 
      - dev
      - prod 

  welcomeMessage: 
    Type: String 
    Default: cfn-init has a hand in this EC2 creation 
    
# 2 Resources (EC2 Template, AutoScaling Group)
Resources:

  # Set a timeout of 06 minutes, else it fails 
  ec2WaitCondition: 
    Type: AWS::CloudFormation::WaitCondition
    CreationPolicy: 
      ResourceSignal:
        Timeout: PT06M
        
  # Create EC2 template and install httpd up and running 
  # Inputs: 
  #  Parameter store values 
  #  1) Template name
  #  2) Instance Type 
  #  3) Image Id 
  #  4) Key name 
  #
  #  From the "permissions" stack
  #  5) Security Group ID  
  #  
  #  6) WaitCondition from resource (10 minutes timeout) 
  #
  myEC2template:
    Type: AWS::EC2::LaunchTemplate

   # Wait for 5 minutes max          
    CreationPolicy: 
        ResourceSignal:
          Timeout: PT5M     
          
    Metadata:
        "AWS::CloudFormation::Init":
          configSets:
            setup:  
              - install_base_packages                     
              - install_code_deploy_agent
              - install_docker
           
          install_base_packages:
            commands:
                "updates": 
                    "command": "yum update -y"
                "ruby_install": 
                    "command": "yum install -y ruby"
                       
          install_code_deploy_agent:
            files:
               "/home/ec2-user/install":
                 source: "https://aws-codedeploy-us-east-1.s3.us-east-1.amazonaws.com/latest/install"
                 mode: "000755"
                 owner: root
                 group: root
            commands: 
              "install_agent":
                 "command": "./install auto" 
                 "cwd": "/home/ec2-user" 
#              "cfn-signal-back": 
#                 "command": 
#                    Fn::Sub: "/opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource publicInstances --region ${AWS::Region}"
# 
          install_docker:
            packages:
              yum:
                docker: []
            commands: 
              "docker_perm": 
                "command": 
                  Fn::Sub: "usermod -aG docker ec2-user"
#              "cfn-signal-back": 
#                "command": 
#                  Fn::Sub: "/opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource publicInstanceWithCInit --region ${AWS::Region}"
            services: 
              sysvinit: 
                docker: 
                  enabled: true 
                  ensureRunning: true 
                                                        
    Condition: createOnlyProdResources 
    Properties:                                                                  
       ImageId: !Sub '{{resolve:ssm:/${environment}/ec2/ami_id}}'                 
       KeyName: !Sub '{{resolve:ssm:/${environment}/ec2/keyname}}'                
       InstanceType: !Sub '{{resolve:ssm:/${environment}/ec2/instance_type}}'     
       IamInstanceProfile:                                     
          Fn::ImportValue:                                                        
             Fn::Sub: "${permStackName}-EC2-INSTANCE-PROFILE"
       SecurityGroupIds:                                                          
          - Fn::ImportValue:                                                      
             Fn::Sub: "${permStackName}-PUBLIC-SG"                                
       SubnetId:                                                                  
          Fn::ImportValue:                                                        
             Fn::Sub: "${networkStackName}-PUBLIC-SUBNET1"                        
       VpcId:                                                                     
          Fn::ImportValue:                                                        
            Fn::Sub: "${networkStackName}-VPCID"                                  
                                                                                  
       UserData:                                                                  
         Fn::Base64:                                                              
           !Sub |                                                                 
              #!/bin/bash -x                                                       
              yum update -y
              yum update -y aws-cfn-bootstrap
              /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource publicInstanceWithCInit --configsets setup --region ${AWS::Region}
              /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource publicInstanceWithCInit --region ${AWS::Region}

       Tags:
         - Key: Name
           Value: !Join ["-", [Fn::Sub: "${AWS::StackName}", "PublicInstanceWithCInit"] ]
         - Key: Environment
           Value: !Sub ${environment}
            
  # Create an autoscaling group using the template above 
  # Inputs: 
  #  From Parameter store
  #  1) Autoscale min value 
  #  2) Autoscale max value  
  #  3) Autoscale desired value 
  #  4) Key name 
  #
  #  From the "ALB" stack
  #  5) Target Group ID  
  #  
  #  6) EC2 Template reference 
  #
  myAutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: myautoscalinggroup
      LaunchTemplate: 
        LaunchTemplateId: !Ref myEC2template
        Version: !GetAtt myEC2template.LatestVersionNumber
      VPCZoneIdentifier: 
          - Fn::ImportValue: 
             Fn::Sub: "${networkStackName}-PUBLIC-SUBNET1"
          - Fn::ImportValue: 
             Fn::Sub: "${networkStackName}-PUBLIC-SUBNET2"
      MinSize: 
          !Sub '{{resolve:ssm:/${environment}/autoscale/autoscale_min}}'  
      MaxSize: 
          !Sub '{{resolve:ssm:/${environment}/autoscale/autoscale_max}}'  
      DesiredCapacity: 
          !Sub '{{resolve:ssm:/${environment}/autoscale/autoscale_desired}}'  
      TargetGroupARNs: 
          - Fn::ImportValue: 
             Fn::Sub: "${albStackName}-TARGET-GROUP"
        
      Tags:
       - Key: Name
         Value: !Join [" - ", [Fn::Sub: "${AWS::StackName}", " auto"] ]
         PropagateAtLaunch: true
       - Key: Environment
         Value: !Sub ${environment}	
         PropagateAtLaunch: true

Outputs:
  LoadBalancer:
    Value: !Ref myEC2template
    Export:
      "Name" :
        Fn::Sub: "${AWS::StackName}-TEMPLATE"
  AutoscaleGroup:
    Value: !Ref myAutoscalingGroup
    Export:
      "Name" :
        Fn::Sub: "${AWS::StackName}-AUTOSCALE-GROUP"


