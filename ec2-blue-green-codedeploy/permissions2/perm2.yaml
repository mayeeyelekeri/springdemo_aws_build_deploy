# File: perm.yaml 
# This module create all the "permissions" related to extended modules  
#
# Before executing this, make sure "init.sh" is called which would create all "Parameter Store" values 
#
# Resource that would be created
# 1) CodeDeploy Service Role 
# 2) CodePipeline Serivice Role 
#
Description: "Permission stack for new modules"

Parameters: 
  networkStackName:
    Description: Name of the base stack with all network resources
    Type: String
    Default: nw

  environment: 
    Type: String 
    Default: dev 
    AllowedValues: 
      - dev
      - prod 

Resources:
  # Create CodeDeploy Service Role    
  #   
  codeDeployServiceRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: codeDeployServiceRole
        Path: /
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - codedeploy.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: "ECSAccess"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                  -
                    Effect: "Allow"
                    Action:
                      - ecs:DescribeServices
                      - ecs:CreateTaskSet
                      - ecs:UpdateServicePrimaryTaskSet
                      - ecs:DeleteTaskSet
                      - elasticloadbalancing:DescribeTargetGroups
                      - elasticloadbalancing:DescribeListeners
                      - elasticloadbalancing:ModifyListener
                      - elasticloadbalancing:DescribeRules
                      - elasticloadbalancing:ModifyRule
                      - lambda:InvokeFunction
                      - cloudwatch:DescribeAlarms
                      - sns:Publish
                      - s3:GetObject
                      - s3:GetObjectVersion
                    Resource: "*"
                  -
                   Effect: "Allow"
                   Action:
                      - iam:PassRole
                   Resource: "*"      
                   Condition:
                     StringLike:
                       iam:PassedToService:
                       - ecs-tasks.amazonaws.com
                               
          - PolicyName: "S3"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                  -
                    Effect: "Allow"
                    Action:
                        - s3:GetObject
                        - s3:PutObject
                        - s3:GetObjectVersion
                    Resource: "*"
          - PolicyName: "autoscale"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                  -
                    Effect: "Allow"
                    Action:
                        - autoscaling:CompleteLifecycleAction
                        - autoscaling:DeleteLifecycleHook
                        - autoscaling:DescribeAutoScalingGroups
                        - autoscaling:DescribeLifecycleHooks
                        - autoscaling:PutLifecycleHook
                        - autoscaling:RecordLifecycleActionHeartbeat
                        - autoscaling:CreateAutoScalingGroup
                        - autoscaling:CreateOrUpdateTags
                        - autoscaling:UpdateAutoScalingGroup
                        - autoscaling:EnableMetricsCollection
                        - autoscaling:DescribePolicies
                        - autoscaling:DescribeScheduledActions
                        - autoscaling:DescribeNotificationConfigurations
                        - autoscaling:SuspendProcesses
                        - autoscaling:ResumeProcesses
                        - autoscaling:AttachLoadBalancers
                        - autoscaling:AttachLoadBalancerTargetGroups
                        - autoscaling:PutScalingPolicy
                        - autoscaling:PutScheduledUpdateGroupAction
                        - autoscaling:PutNotificationConfiguration
                        - autoscaling:PutWarmPool
                        - autoscaling:DescribeScalingActivities
                        - autoscaling:DeleteAutoScalingGroup
                        - ec2:DescribeInstances
                        - ec2:DescribeInstanceStatus
                        - ec2:TerminateInstances
                        - tag:GetResources
                        - sns:Publish
                        - cloudwatch:DescribeAlarms
                        - cloudwatch:PutMetricAlarm
                        - elasticloadbalancing:DescribeLoadBalancerAttributes
                        - elasticloadbalancing:DescribeTargetGroupAttributes
                        - elasticloadbalancing:DescribeLoadBalancers
                        - elasticloadbalancing:DescribeInstanceHealth
                        - elasticloadbalancing:RegisterInstancesWithLoadBalancer
                        - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
                        - elasticloadbalancing:DescribeTargetGroups
                        - elasticloadbalancing:DescribeTargetHealth
                        - elasticloadbalancing:RegisterTargets
                        - elasticloadbalancing:DeregisterTargets
                    Resource: "*"
   
  # Create CodeDeploy Service Role
  codePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: codePipelineServiceRole
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: codepipeline-base-policy
            # !Join ["-", [!Sub '{{resolve:ssm:/${environment}/codebuild/project_name}}', codepipeline-base-policy ]]
          PolicyDocument:
           Version: 2012-10-17
           Statement:
            - Action:
                - elasticbeanstalk:*
                - ec2:*
                - elasticloadbalancing:*
                - autoscaling:*
                - cloudwatch:*
                - s3:*
                - sns:*
                - cloudformation:*
                - rds:*
                - ecs:*
              Resource: "*"
              Effect: Allow
            - Action:
                - codecommit:GetBranch
                - codecommit:GetCommit
                - codecommit:GetUploadArchiveStatus
                - codecommit:UploadArchive
                - codecommit:CancelUploadArchive
              Resource: "*"
              Effect: Allow
            - Action:
                - codedeploy:CreateDeployment
                - codedeploy:GetApplicationRevision
                - codedeploy:GetDeployment
                - codedeploy:GetDeploymentConfig
                - codedeploy:RegisterApplicationRevision
              Resource: "*"
              Effect: Allow
            - Action:
                - codebuild:BatchGetBuilds
                - codebuild:StartBuild
              Resource: "*"
              Effect: Allow
            - Action:
                - iam:PassRole
              Resource: "*"
              Effect: Allow
              Condition:
                StringEqualsIfExists:
                  iam:PassedToService:
                    - cloudformation.amazonaws.com
                    - elasticbeanstalk.amazonaws.com
                    - ec2.amazonaws.com
                    - ecs-tasks.amazonaws.com
            - Action:
                - lambda:InvokeFunction
                - lambda:ListFunctions
              Resource: "*"
              Effect: Allow
            - Action:
                - ecr:DescribeImages
              Resource: "*"
              Effect: Allow
              
        # Policy to access Parameter Store 
        - PolicyName: codepipeline-ssm-policy
          PolicyDocument:
           Version: 2012-10-17
           Statement:
            - Effect: Allow
              Resource:
                - "*"
              Action:
                - ssm:DescribeParameters
            - Effect: Allow
              Resource:
                - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*
              Action:
                - ssm:GetParameters

  # 
  # Create an a Role for ECS to pull images from ECR     
  # Also to log events in cloudwatch 
  # This will be used by ECS 
  #
  ecsExecutionRole:
   Type: AWS::IAM::Role
   Properties:
     RoleName: ecsExecutionRole
     Path: /
     AssumeRolePolicyDocument:
       Statement:
         - Effect: Allow
           Principal:
             Service:
               - ecs-tasks.amazonaws.com
           Action:
             - sts:AssumeRole

     Policies:
       - PolicyName: "AmazonECSTaskExecutionRolePolicy"
         PolicyDocument:
           Version: "2012-10-17"
           Statement:
               -
                 Effect: "Allow"
                 Action:
                     - ecr:GetAuthorizationToken
                     - ecr:BatchCheckLayerAvailability
                     - ecr:GetDownloadUrlForLayer
                     - ecr:BatchGetImage
                     - logs:CreateLogStream
                     - logs:PutLogEvents
                 Resource: "*"

#
  lambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: lambdaRole
        Path: /
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: "AWSLambdaBasicExecutionRole"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                  -
                    Effect: "Allow"
                    Action:
                      - logs:CreateLogGroup
                      - logs:CreateLogStream
                      - logs:PutLogEvents
                    Resource: "*"

# Export all the values 
# 1) Code deploy service role Arn: perm2-CODEDEPLOY-SERVICE-ROLE-ARN
# 2) Code pipeline service role Arn: perm2-CODEPIPELINE-SERVICE-ROLE-ARN
#
Outputs: 
  CodeDeployServiceRole:
    Value: !GetAtt codeDeployServiceRole.Arn 
    Export:
      "Name" :
        Fn::Sub: "${AWS::StackName}-CODEDEPLOY-SERVICE-ROLE-ARN"  
         
  CodePipelineServiceRole:
    Value: !GetAtt codePipelineServiceRole.Arn 
    Export:
      "Name" :
        Fn::Sub: "${AWS::StackName}-PIPELINE-SERVICE-ROLE-ARN"
  
  EcsExecutionRoleArn:
    Value: !GetAtt ecsExecutionRole.Arn 
    Export:
      "Name" :
        Fn::Sub: "${AWS::StackName}-ECS-EXECUTION-ROLE-ARN"   